#!/usr/bin/env python
import contextlib as __stickytape_contextlib

@__stickytape_contextlib.contextmanager
def __stickytape_temporary_dir():
    import tempfile
    import shutil
    dir_path = tempfile.mkdtemp()
    try:
        yield dir_path
    finally:
        shutil.rmtree(dir_path)

with __stickytape_temporary_dir() as __stickytape_working_dir:
    def __stickytape_write_module(path, contents):
        import os, os.path

        def make_package(path):
            parts = path.split("/")
            partial_path = __stickytape_working_dir
            for part in parts:
                partial_path = os.path.join(partial_path, part)
                if not os.path.exists(partial_path):
                    os.mkdir(partial_path)
                    with open(os.path.join(partial_path, "__init__.py"), "wb") as f:
                        f.write(b"\n")

        make_package(os.path.dirname(path))

        full_path = os.path.join(__stickytape_working_dir, path)
        with open(full_path, "wb") as module_file:
            module_file.write(contents)

    import sys as __stickytape_sys
    __stickytape_sys.path.insert(0, __stickytape_working_dir)

    __stickytape_write_module('src/__init__.py', b'from . import globals\n\nglobals._init()\n\nfrom .basic_system_info import *\nfrom .default_result_list import default_result\n\nglobals.set(\n    {\n        "platform": {"name": sys_name, "type": sys_type, "arch": sys_arch},\n        "result": {result: "" for result in default_result},\n        "args": {},\n    }\n)\n\nfrom . import sysinfo\n\nsysinfo.run()\n\n\ndef get_result():\n    result_dict = globals.get(["result"])[0]\n    result = "{}@{}\\n".format(result_dict.pop("USERNAME"), result_dict.pop("HOSTNAME"))\n    result += "-" * (len(result) - 1) + "\\n"\n    for key in default_result:\n        if key in result_dict.keys():\n            val = result_dict[key].strip()\n            if isinstance(val, str) and val != "":\n                result += "{}: {}\\n".format(key, val)\n    return result\n\n\nresult = get_result()\n')
    __stickytape_write_module('src/globals.py', b'def _init():\n    global _global_dict\n    _global_dict = {}\n\n\ndef set(new_dict: dict) -> None:\n    merge(new_dict, _global_dict)\n\n\ndef merge(new_dict: dict, old_dict: dict):\n    for key in new_dict.keys():\n        if isinstance(key, str):\n            if (\n                isinstance(new_dict[key], dict)\n                and key in old_dict.keys()\n                and isinstance(old_dict[key], dict)\n            ):\n                merge(new_dict[key], old_dict[key])\n            elif new_dict[key] != ("" or None):\n                old_dict[key] = new_dict[key]\n\n\ndef get(keys: list):\n    result = []\n    for key in keys:\n        if isinstance(key, str):\n            result.append(_global_dict[key])\n    return result\n\n\ndef delete(keys: list):\n    for key in keys:\n        if isinstance(key, str):\n            del _global_dict[key]\n')
    __stickytape_write_module('src/basic_system_info.py', b'from platform import system, machine\nfrom os import name\n\nsys_name = system()\nsys_type = name\nsys_arch = machine()\n')
    __stickytape_write_module('src/default_result_list.py', b'default_result = [\n    "USERNAME",\n    "HOSTNAME",\n    "OS",\n    "Host",\n    "Kernel",\n    "Uptime",\n    "Packages",\n    "Shell",\n    "Resolution",\n    "DE",\n    "WM",\n    "Theme",\n    "Icons",\n    "Cursor",\n    "Terminal",\n    "Terminal Font",\n    "CPU",\n    "GPU",\n    "Memory",\n]\n')
    __stickytape_write_module('src/sysinfo/__init__.py', b'from .. import globals\nfrom importlib import import_module\nfrom pathlib import Path\nfrom threading import Thread\n\nfunctions_list = [\n    getattr(import_module(f".{f.stem}", __package__), "get")\n    for f in Path(__file__).parent.iterdir()\n    if "__" not in f.stem\n]\ndel import_module, Path\n\n\ndef run():\n    output_slot = [{}] * len(functions_list)\n    thread_list = []\n\n    for index, function in enumerate(functions_list):\n        thread = Thread(target=function, args=[output_slot[index]])\n        thread.start()\n        thread_list.append(thread)\n\n    for thread in thread_list:\n        thread.join()\n    for result_dict in output_slot:\n        globals.set({"result": result_dict})\n')
    #!/usr/bin/env python3
    from sys import version_info, exit
    
    if not (version_info[0] == 3 and version_info[1] >= 7):
        exit("Sorry, Please use Python3 > 3.7")
    
    import src
    
    if __name__ == "__main__":
        print(src.result)
    